"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Film implements Node {
  director: String!
  id: ID!
  producer: String!
  title: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  _version: String!
  updateUser(name: String!): User!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Planet implements Node {
  climate: String!
  films: [Film!]!
  id: ID!
  name: String!
  population: String!
  residents: [Resident!]
}

type Query {
  _version: String!

  """
  A field that resolves fast.
  """
  fastField: String!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  planet(id: ID!): Planet
  planets(
    after: String
    before: String
    first: Int
    last: Int
  ): QueryPlanetsConnection!

  """
  A field that resolves slowly.
  """
  slowfield(waitFor: Int = 5000): String!
  user(id: ID): User
  users(
    after: String
    before: String
    first: Int
    last: Int
  ): QueryUsersConnection!
}

type QueryPlanetsConnection {
  edges: [QueryPlanetsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryPlanetsConnectionEdge {
  cursor: String!
  node: Planet!
}

type QueryUsersConnection {
  edges: [QueryUsersConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryUsersConnectionEdge {
  cursor: String!
  node: User!
}

type Resident implements Node {
  height: String!
  id: ID!
  mass: String!
  name: String!
}

type User implements Node {
  id: ID!
  name: String!
}
